Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
Examining ApvlvCmds.cpp
Examining ApvlvCmds.hpp
Examining ApvlvCore.cpp
Examining ApvlvCore.hpp
Examining ApvlvDir.cpp
Examining ApvlvDir.hpp
Examining ApvlvDoc.cpp
Examining ApvlvDoc.hpp
Examining ApvlvParams.cpp
Examining ApvlvParams.hpp
Examining ApvlvUtil.cpp
Examining ApvlvUtil.hpp
Examining ApvlvView.cpp
Examining ApvlvView.hpp
Examining ApvlvWindow.cpp
Examining ApvlvWindow.hpp
Examining config.hpp
Examining main.cpp
ApvlvUtil.cpp:95:  [4] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination.
  Consider using strncat or strlcat (warning, strncat is easily misused). 
ApvlvUtil.cpp:237:  [4] (format) vsnprintf:
  If format strings can be influenced by an attacker, they can be
  exploited, and note that sprintf variations do not always \0-terminate. Use a
  constant for the format specification. 
ApvlvView.cpp:832:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available. 
ApvlvDir.cpp:133:  [3] (buffer) realpath:
  This function does not protect against buffer overflows, and some
  implementations can overflow internally. Ensure that the destination buffer
  is at least of size MAXPATHLEN, andto protect against implementation
  problems, the input argument should also be checked to ensure it is no
  larger than MAXPATHLEN. 
ApvlvDir.cpp:145:  [3] (buffer) realpath:
  This function does not protect against buffer overflows, and some
  implementations can overflow internally. Ensure that the destination buffer
  is at least of size MAXPATHLEN, andto protect against implementation
  problems, the input argument should also be checked to ensure it is no
  larger than MAXPATHLEN. 
ApvlvDir.cpp:146:  [3] (buffer) realpath:
  This function does not protect against buffer overflows, and some
  implementations can overflow internally. Ensure that the destination buffer
  is at least of size MAXPATHLEN, andto protect against implementation
  problems, the input argument should also be checked to ensure it is no
  larger than MAXPATHLEN. 
ApvlvDir.hpp:51:  [3] (buffer) realpath:
  This function does not protect against buffer overflows, and some
  implementations can overflow internally. Ensure that the destination buffer
  is at least of size MAXPATHLEN, andto protect against implementation
  problems, the input argument should also be checked to ensure it is no
  larger than MAXPATHLEN. 
ApvlvUtil.cpp:86:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker.  They can have any content and length, and the same variable
  can be set more than once. Check environment variables carefully before
  using them. 
ApvlvUtil.cpp:97:  [3] (buffer) realpath:
  This function does not protect against buffer overflows, and some
  implementations can overflow internally. Ensure that the destination buffer
  is at least of size MAXPATHLEN, andto protect against implementation
  problems, the input argument should also be checked to ensure it is no
  larger than MAXPATHLEN. 
main.cpp:96:  [3] (buffer) getopt_long:
  Some older implementations do not protect against internal buffer
  overflows . Check implementation on installation, or limit the size of all
  string inputs. 
ApvlvCmds.cpp:115:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvCmds.cpp:231:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvCmds.cpp:425:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvCmds.cpp:438:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvCmds.cpp:448:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvDir.cpp:617:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvDir.hpp:55:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvDoc.cpp:227:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
ApvlvDoc.cpp:261:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvDoc.cpp:1171:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvParams.cpp:115:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvParams.cpp:116:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination. Make
  sure destination can always hold the source data. 
ApvlvParams.cpp:200:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvUtil.cpp:72:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvUtil.cpp:230:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvView.cpp:161:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
ApvlvView.cpp:614:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvView.cpp:690:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvView.cpp:872:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:893:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:900:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:905:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:980:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:982:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range. 
  If source untrusted, check both minimum and maximum, even if the input
  had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended). 
ApvlvView.cpp:1161:  [2] (buffer) char:
  Statically-sized arrays can be overflowed. Perform bounds checking,
  use functions that limit length, or ensure that the size is larger than
  the maximum possible length. 
ApvlvView.hpp:92:  [2] (misc) open:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move
  things around to create a race condition, control its ancestors, or change
  its contents?. 
ApvlvCmds.cpp:198:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvDir.cpp:714:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvDoc.cpp:694:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvDoc.cpp:722:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvDoc.cpp:741:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvParams.cpp:125:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
ApvlvUtil.cpp:94:  [1] (buffer) strcat:
  Does not check for buffer overflows when concatenating to destination.
  Consider using strncat or strlcat (warning, strncat is easily misused).
  Risk is low because the source is a constant character.
ApvlvUtil.cpp:184:  [1] (buffer) read:
  Check buffer boundaries if used in a loop. 
ApvlvUtil.hpp:87:  [1] (obsolete) usleep:
  This C routine is considered obsolete (as opposed to the shell command
  by the same name).   The interaction of this function with SIGALRM and
  other timer functions such as sleep(), alarm(), setitimer(), and
  nanosleep() is unspecified. Use nanosleep(2) or setitimer(2) instead. 
ApvlvView.cpp:567:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvView.cpp:587:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvView.cpp:1036:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvView.cpp:1049:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 
ApvlvView.cpp:1059:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 

Hits = 50
Lines analyzed = 6810 in 0.75 seconds (27665 lines/second)
Physical Source Lines of Code (SLOC) = 5053
Hits@level = [0]   0 [1]  14 [2]  26 [3]   7 [4]   3 [5]   0
Hits@level+ = [0+]  50 [1+]  50 [2+]  36 [3+]  10 [4+]   3 [5+]   0
Hits/KSLOC@level+ = [0+] 9.89511 [1+] 9.89511 [2+] 7.12448 [3+] 1.97902 [4+] 0.593707 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
